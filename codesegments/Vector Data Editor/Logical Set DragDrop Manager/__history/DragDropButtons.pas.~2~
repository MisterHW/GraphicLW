unit DragDropButtons;

interface
uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, Buttons, StdCtrls, ExtCtrls, Math, Menus, ActnPopup;


type TSetOperationEvent = procedure(Source, Dest: TObject) of object;

type TDragDropButtonField = class(TObject)

public
  PlusButton  : TSpeedButton;
  MinusButton : TSpeedButton;
  ActionBar   : TPopupActionBar;
private
  Image1: TImage;
  Panel1: TPanel;
  StartObject : TSpeedButton;
  EndObject   : TSpeedButton;
  moving      : Boolean;

  PlusEvent   : TSetOperationEvent;
  MinusEvent  : TSetOperationEvent;

  procedure UpdateArrow(a, b: TSpeedButton; target: TImage);
  procedure DNDMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  procedure DNDMouseMove(Sender: TObject; Shift: TShiftState; X, Y: Integer);
  procedure DNDMouseUp(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
  procedure ResetIllustration;
  procedure Image1Click(Sender: TObject);
  procedure PlusButtonClick(Sender: TObject);
  procedure MinusButtonClick(Sender: TObject);
end;


implementation



procedure TDragDropButtonField.UpdateArrow(a, b: TSpeedButton; target: TImage);
var
 recta, rectb: TRect;
 arrowstartx, arrowendx: integer;
begin
  with image1.Picture do
  begin
    Bitmap.Canvas.Brush.Color := Panel1.Color;
    if Bitmap.Height * Bitmap.Width = 0 then
    begin
      Bitmap.Width  := image1.Width;
      Bitmap.Height := image1.Height;
    end;
    Bitmap.Canvas.FillRect(rect(0,0,image1.width, image1.Height));

    if not assigned(a) then exit;
    recta := a.BoundsRect;

    Bitmap.Canvas.Pen.Color := $303030;
    Bitmap.Canvas.Pen.Width := 2;

    Bitmap.Canvas.MoveTo(recta.Left -image1.Left,image1.Height-2);
    Bitmap.Canvas.LineTo(recta.Right-image1.Left,image1.Height-2);

    if assigned(b) and (a<>b) then
    begin
      rectb := b.BoundsRect;

      arrowstartx := (recta.Left + recta.Right) div 2;
      arrowendx   := (rectb.Left + rectb.Right) div 2;

      Bitmap.Canvas.MoveTo( arrowstartx -image1.Left,
                            image1.Height-2);
      Bitmap.Canvas.LineTo( arrowstartx-image1.Left + 8 * sign(arrowendx- arrowstartx),
                            image1.Height-2-8);

      Bitmap.Canvas.LineTo( arrowendx  -image1.Left - 8 * sign(arrowendx- arrowstartx),
                            image1.Height-2-8);

      Bitmap.Canvas.LineTo( arrowendx -image1.Left,
                            image1.Height-2);

      // Bitmap.Canvas.Pen.Color := clblue;

      Bitmap.Canvas.MoveTo(rectb.Left -image1.Left,image1.Height-2);
      Bitmap.Canvas.LineTo(rectb.Right-image1.Left,image1.Height-2);
    end;


  end;
end;

procedure TDragDropButtonField.DNDMouseDown(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
begin
  StartObject := nil;
  EndObject   := nil;

  if not assigned(Sender) then exit;
  if not (Sender is TSpeedButton) then exit;
  X := X + (Sender as TSpeedButton).Left;
  Y := Y + (Sender as TSpeedButton).Top;

  StartObject := Sender as TSpeedButton;
  EndObject   := StartObject;

  PlusButton.Hide;
  MinusButton.Hide;
  UpdateArrow(StartObject, EndObject,Image1);
  moving := true;
end;

procedure TDragDropButtonField.DNDMouseMove(Sender: TObject; Shift: TShiftState; X,
  Y: Integer);
var
  pos: TPoint;
begin
  if (not assigned(StartObject)) or (not moving) then exit;

  if not assigned(Sender) then exit;
  if not (Sender is TSpeedButton) then exit;
  X := X + (Sender as TSpeedButton).Left;
  Y := Y + (Sender as TSpeedButton).Top;

  Sender := (Sender as TSpeedButton).Parent.ControlAtPos( Point(X,Y), false, true, true);
  if not (Sender is TSpeedButton) then exit;

  if  EndObject <> Sender then
  begin
    EndObject := Sender as TSpeedButton;
    UpdateArrow(StartObject, EndObject,Image1);
  end;
end;


procedure TDragDropButtonField.DNDMouseUp(Sender: TObject; Button: TMouseButton;
  Shift: TShiftState; X, Y: Integer);
var
  pt: TPoint;
begin
  moving := False;
  if not assigned(StartObject) then exit;

  if not assigned(Sender) then exit;
  if not (Sender is TSpeedButton) then exit;
  X := X + (Sender as TSpeedButton).Left;
  Y := Y + (Sender as TSpeedButton).Top;

  Sender := (Sender as TSpeedButton).Parent.ControlAtPos( Point(X,Y), false, true, true);

  if (Sender is TSpeedButton) then
  if  EndObject <> Sender then
  begin
    EndObject := Sender as TSpeedButton;
    UpdateArrow(StartObject, EndObject,Image1);
  end;

  UpdateArrow(StartObject, EndObject,Image1);

{  if EndObject <> StartObject then
    memo1.Lines.Add(StartObject.Caption + ' >> ' + EndObject.Caption)
  else
    memo1.Lines.Add('self : ' + StartObject.Caption);}

  if StartObject = EndObject then
  begin
    UpdateArrow(nil,nil,Image1);
    pt := StartObject.ClientToScreen(Point(0,StartObject.Height));
    if assigned(ActionBar) then ActionBar.Popup(pt.X, pt.Y);
  end
  else
  begin
    PlusButton.Left := (EndObject.Left + EndObject.Width div 2) - PlusButton.Width+1;
    MinusButton.Left := (EndObject.Left + EndObject.Width div 2)+2;
    PlusButton.Show;
    MinusButton.Show;
  end;
end;

procedure TDragDropButtonField.ResetIllustration;
begin
  PlusButton.Hide;
  MinusButton.Hide;
  UpdateArrow(nil, nil, Image1);
end;

procedure TDragDropButtonField.Image1Click(Sender: TObject);
begin
  ResetIllustration;
end;

procedure TDragDropButtonField.PlusButtonClick(Sender: TObject);
begin
  ResetIllustration;
  if assigned(Self.PlusEvent) then PlusEvent(StartObject, EndObject);
end;

procedure TDragDropButtonField.MinusButtonClick(Sender: TObject);
begin
  ResetIllustration;
  if assigned(Self.MinusEvent) then MinusEvent(StartObject, EndObject);
end;



end.
